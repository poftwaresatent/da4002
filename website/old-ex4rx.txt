<h1>ITADS exercise 4 redux<br />simple integer list and stack</h1>
<h2><strong>Under construction! This is still last year's version and might change...</strong></h2>
<p><strong><span style="text-decoration: underline;">Note</span> this is a greatly simplified form of <a href="index.php?option=com_content&amp;view=article&amp;id=6&amp;catid=9&amp;Itemid=111">exercise 4</a></strong>. The full exercise 4 also includes generics and memory management, which are very important aspects, but rather separate from the core list and stack functionality.</p>
<h2>introduction</h2>
<p>The source file <a href="itads2012/ex4/simple-int-list-and-stack.c">simple-int-list-and-stack.c</a> is a partial implementation of a singly-linked list that stores integers. It does not provide any memory management, which means that it leaks memory. It is thus entirely unsuitable for use in realistic scenarios, but it shows the principles underlying singly linked lists.</p>
<ul>
<li>The list item type, which contains an int as data and a pointer to the next item, are defined in the <tt>Item</tt>struct:
<pre class="sourcecode">typedef struct item_s {
  int data;
  struct item_s * next;
} Item;</pre>
So, if you have a pointer <tt>iptr</tt> to a list item, you can access the data it stores by writing <tt>iptr-&gt;data</tt>. The member called <tt>next</tt> is a pointer to the next item in the list. So, to go from some item pointer <tt>current_ptr</tt> to the next item <tt>next_ptr</tt>, you would write <tt>next_ptr=current_ptr-&gt;next</tt>.</li>
<li>The list itself is defined in the <tt>List</tt> struct, which maintains a pointer to the first and last items (called <tt>head</tt> and <tt>tail</tt>):
<pre class="sourcecode">typedef struct list_s {
  Item * head;
  Item * tail;
} List;</pre>
In order to get a pointer to the first item in the list, you write <tt>lptr-&gt;head</tt>. If <tt>lptr-&gt;head</tt> is <tt>NULL</tt> then you know that the list is empty. Another example: if you need to access the data of the last item on the list, you have to write <tt>lptr-&gt;tail-&gt;data</tt>. <em>But be aware that <tt>head</tt> and <tt>tail</tt> are <tt>NULL</tt> when the list is empty, and in that case your program would crash if you try to access the first or last element.</em></li>
</ul>
<p>After these data type definitions, several functions are provided in the partial implementation:</p>
<dl><dt><tt>list_init</tt></dt><dd>takes a pointer to a list and initializes it. This is necessary before using the list to store items.</dd><dt><tt>list_ins_next</tt></dt><dd>inserts a new item into a list, such that the new item will come after the specified position. Takes a list pointer, an item pointer (which is the position after which the insertion should happen), and an integer as data to store in the new item. As a special case, when you pass <tt>pos=NULL</tt> to this function, then the new item will be inserted at the head of the list. The <tt>list_ins_next</tt> function allocates memory for the new item, but that never gets freed in this simple implementation.</dd><dt><tt>list_rem_next</tt></dt><dd>is just a placeholder to be filled in by you (see the first task of this exercise). It is responsible for removing the item that comes after the given position. As a special case, when you pass <tt>pos=NULL</tt>, the head of the list should be removed. This function should return the integer that was stored in the item that got removed. Again, note that no memory management is done, in particular the memory that was occupied by the removed item will not be freed.</dd><dt><tt>list_dump</tt></dt><dd>is a utility function that iterates over all items of the list and prints their data.</dd><dt><tt>populate</tt></dt><dd>is a utility function which inserts some example numbers into a list.</dd><dt><tt>test_list</tt></dt><dd>is a little test for the singly-linked list. It should get called by main, but only after you've implemented <tt>list_rem_next</tt>.</dd><dt><tt>stack_push</tt></dt><dd>must be implemented by you (see below).</dd><dt><tt>stack_pop</tt></dt><dd>must be implemented by you (see below).</dd><dt><tt>test_stack</tt></dt><dd>is a little test for the stack list. It should get called by main, but only after you've implemented <tt>stack_push</tt> and <tt>stack_pop</tt>.</dd><dt><tt>main</tt></dt><dd>calls the two test functions (commented-out: you first have ti implement <tt>list_rem_next</tt>, then <tt>stack_push</tt> and <tt>stack_pop</tt>).</dd></dl>
<h2>exercise 4.1-redux: removing elements from a singly linked list</h2>
<p>Based on <a href="itads2012/ex4/simple-int-list-and-stack.c">simple-int-list-and-stack.c</a> and the above description of the functions, implement <tt>list_rem_next</tt>. You also have to remove the comments around the call to <tt>test_list</tt> in the <tt>main</tt> function (near the bottom of the file). Check your implementation by compiling and running <tt>simple-int-list-and-stack</tt>.</p>
<p>After you have finished this task, your output should look like this:</p>
<pre class="command">==================================================
singly-linked list
--------------------------------------------------
list after init:
   28  31   1   5  42  43  19  17  15

removing 1
removing 5
removing 17
removing 15

after removing numbers smaller than 18:
   28  31  42  43  19
</pre>
<h2>exercise 4.2-redux: list-based stack</h2>
<p>Implement a stack by using the list implementation you just completed. Remove the comments around <tt>test_stack</tt> in the <tt>main</tt> function (near the bottom of the source file), and fill in the missing implementation of the stack functions::</p>
<dl><dt><tt>stack_push</tt></dt><dd>takes a stack and an integer as argument, and places the integer on the top of the stack.</dd><dt><tt>stack_pop</tt></dt><dd>takes a stack as argument, removes the topmost element, and returns the integer stored there. In case <tt>stack_pop</tt> is called on an empty stack, it should abort the program (use the <tt>errx</tt> function that is also used in other parts of the program).</dd></dl>
<p><em><span style="text-decoration: underline;">Hint</span>: this task is really very quick. You "just" have to call the appropriate list operations in the correct order and pass them the approriate arguments. Both <tt>stack_push</tt> and <tt>stack_pop</tt> can be done in a single line of code.</em></p>
<p>When running this program, you should see the following output:</p>
<pre class="command">==================================================
stack (based on singly-linked list)
--------------------------------------------------
pushed 1
pushed 2
pushed 3
pushed 4
pushed 5

now calling pop...
popped 5
popped 4
popped 3
popped 2
popped 1</pre>
<p>Notice that they are printed in the opposite order of assigment (LIFO: last-in first-out).</p>
<h3>solution 4-redux: <a href="itads2012/ex4/Jaiw7Bah/simple-int-list-and-stack-solution.c">simple-int-list-and-stack-solution.c</a></h3>