<h1>ITADS exercise 8<br />dynamic programming</h1>
<h2><strong>Under construction! This is still last year's version and might change...</strong></h2>
<h2>exercise 8.1: equipment replacement</h2>
<p>Read <a href="http://mat.gsia.cmu.edu/classes/dynamic/node7.html">this example</a> from an online tutorial on dynamic programming. And here are some <a href="itads2012/ex8/equipment-replacement-alt-handwritten.pdf">handwritten notes</a> that provide a slightly different (more formal) explanation of that example. Then apply the same method to the following variations of the problem:</p>
<ol>
<li>List all the optimal solutions (the tutorial only gives one of them).</li>
<li>Let the maintenance costs be higher:<br /> <strong>m<sub>1</sub>=100, m<sub>2</sub>=110, m<sub>3</sub>=200</strong>
<ul>
<li>Redo the computations for all stages.</li>
<li>What is the optimal cost after this change?</li>
<li>What is the new optimal solution (there is only one)?</li>
</ul>
</li>
<li><em>Optional (time intensive):</em><br /> Let the maximum age of a machine be 4 instead of 3, and use the following maintenance costs and trade values:<br /> <strong>m<sub>1</sub>=60, m<sub>2</sub>=80, m<sub>3</sub>=120, m<sub>4</sub>=130</strong><br /> <strong>s<sub>1</sub>=800, s<sub>2</sub>=600, s<sub>3</sub>=500, s<sub>4</sub>=400</strong>
<ul>
<li>Redo the computations for all stages.</li>
<li>What is the optimal cost after this change?</li>
<li>Give the two new optimal solutions.</li>
</ul>
</li>
</ol>
<h2>exercise 8.2: change-making program</h2>
<p>Consider the first dynamic programming example from lecture 6:</p>
<ul>
<li>a country has the following coins: 1 cent, 3 cents, 7 cents</li>
<li>you want to find the minimum number of coins required to make K<sub>0</sub> cents</li>
<li>to solve this with dynamic programming, we define<dl><dt>state K<sub>n</sub></dt><dd>the remaining amount of cents left to achieve the total of K<sub>0</sub></dd><dt>action C<sub>n</sub></dt><dd>the coin you choose (either 1, 3, or 7)</dd><dt>cost of an action F(K<sub>n</sub>,C<sub>n</sub>)</dt><dd>always 1 (one), because we are minimizing the total number of coins, regardless of their specific value</dd><dt>transition</dt><dd>K<sub>n+1</sub> = T(K<sub>n</sub>,C<sub>n</sub>) = K<sub>n</sub>-C<sub>n</sub></dd><dd>explanation: when K<sub>n</sub> cents remain, and we choose a coin worth C<sub>n</sub> cents, then we will still need to "fill" the rest</dd><dt>value function</dt><dd>V(K<sub>n</sub>) = min<sub>C<sub>n</sub></sub>(1 + V(K<sub>n</sub>-C<sub>n</sub>))</dd><dd>This gets build from K=1 upward using a table that tracks the optimal choice and the corresponding value for each K={1, 2, 3, ...}</dd></dl></li>
</ul>
<p>As a reminder, here are the first few entries of the table constructed on the whiteboard during lecture 6:</p>
<div id="schedule">
<table>
<tbody>
<tr>
<td>K</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>C = 1</td>
<td>1 + V(1-1) = 1</td>
<td>1 + V(2-1) = 2</td>
<td>1 + V(3-1) = 3</td>
<td>1 + V(4-1) = 2</td>
</tr>
<tr>
<td>C = 3</td>
<td><em>impossible</em></td>
<td><em>impossible</em></td>
<td>1 + V(3-3) = 1</td>
<td>1 + V(4-3) = 2</td>
</tr>
<tr>
<td>C = 7</td>
<td><em>impossible</em></td>
<td><em>impossible</em></td>
<td><em>impossible</em></td>
<td><em>impossible</em></td>
</tr>
<tr>
<td>best C</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>1 or 3</td>
</tr>
<tr>
<td>V(K)</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>Write a program that computes the change-making algorithm for K<sub>0</sub>={1, 2, 3, ... 20} and prints the resulting table to the terminal.<br /> <em><span style="text-decoration: underline;">Hint:</span> it is easier to print the table transposed (every K gets a line instead of a column), for example like this:</em>
<pre class="command"> K | C1 C2 C3 |  V | best coin(s)
---+----------+----+-------------
 1 |  1       |  1 | 1 
 2 |  2       |  2 | 1 
 3 |  3  1    |  1 | 3 
 4 |  2  2    |  2 | 1 3 
 5 |  3  3    |  3 | 1 3 
 6 |  4  2    |  2 | 3 
 7 |  3  3  1 |  1 | 7 
 8 |  2  4  2 |  2 | 1 7 
 9 |  3  3  3 |  3 | 1 3 7 
10 |  4  2  2 |  2 | 3 7 
11 |  3  3  3 |  3 | 1 3 7 
12 |  4  4  4 |  4 | 1 3 7 
13 |  5  3  3 |  3 | 3 7 
14 |  4  4  2 |  2 | 7 
15 |  3  5  3 |  3 | 1 7 
16 |  4  4  4 |  4 | 1 3 7 
17 |  5  3  3 |  3 | 3 7 
18 |  4  4  4 |  4 | 1 3 7 
19 |  5  5  5 |  5 | 1 3 7 
20 |  6  4  4 |  4 | 3 7 </pre>
</li>
<li>Extend the program so that, after printing the table, it also prints one of the optimal coin sequences for every K<sub>0</sub> (again, from 1 to 20)<br /> <em>Your program output should look somewhat like this:</em>
<pre class="command"> K | C1 C2 C3 |  V |  choices | optimal sequence
---+----------+----+----------+-----------------
 1 |  1       |  1 |  1       | 1
 2 |  2       |  2 |  1       | 1+1
 3 |  3  1    |  1 |     3    | 3
 4 |  2  2    |  2 |  1  3    | 1+3
 5 |  3  3    |  3 |  1  3    | 1+1+3
 6 |  4  2    |  2 |     3    | 3+3
 7 |  3  3  1 |  1 |        7 | 7
 8 |  2  4  2 |  2 |  1     7 | 1+7
 9 |  3  3  3 |  3 |  1  3  7 | 1+1+7
10 |  4  2  2 |  2 |     3  7 | 3+7
11 |  3  3  3 |  3 |  1  3  7 | 1+3+7
12 |  4  4  4 |  4 |  1  3  7 | 1+1+3+7
13 |  5  3  3 |  3 |     3  7 | 3+3+7
14 |  4  4  2 |  2 |        7 | 7+7
15 |  3  5  3 |  3 |  1     7 | 1+7+7
16 |  4  4  4 |  4 |  1  3  7 | 1+1+7+7
17 |  5  3  3 |  3 |     3  7 | 3+7+7
18 |  4  4  4 |  4 |  1  3  7 | 1+3+7+7
19 |  5  5  5 |  5 |  1  3  7 | 1+1+3+7+7
20 |  6  4  4 |  4 |     3  7 | 3+3+7+7
</pre>
</li>
<li><em>Optional (advanced)</em>:<br /> extend the program so that the possible choices (the available coin denominations) and the range of K<sub>0</sub>can be specified on the command line. For example, you could interpret the first argument as the upper bound for the range of K, and the remaining ones as the denominations. Then, you could create a table for making change in more commonly encountered situations, such as:
<pre class="command">&gt; ./change  25 1 2 5 10 25
  K | C1  C2  C5  C10 C25 |  V |  choices and optimal sequence
----------------------------------------------------------------------
  1 |   1                 |  1 |  1             | 1
  2 |   2   1             |  1 |     2          | 2
  3 |   2   2             |  2 |  1  2          | 1+2
  4 |   3   2             |  2 |     2          | 2+2
  5 |   3   3   1         |  1 |        5       | 5
  6 |   2   3   2         |  2 |  1     5       | 1+5
  7 |   3   2   2         |  2 |     2  5       | 2+5
  8 |   3   3   3         |  3 |  1  2  5       | 1+2+5
  9 |   4   3   3         |  3 |     2  5       | 2+2+5
 10 |   4   4   2   1     |  1 |          10    | 10
 11 |   2   4   3   2     |  2 |  1       10    | 1+10
 12 |   3   2   3   2     |  2 |     2    10    | 2+10
 13 |   3   3   4   3     |  3 |  1  2    10    | 1+2+10
 14 |   4   3   4   3     |  3 |     2    10    | 2+2+10
 15 |   4   4   2   2     |  2 |        5 10    | 5+10
 16 |   3   4   3   3     |  3 |  1     5 10    | 1+5+10
 17 |   4   3   3   3     |  3 |     2  5 10    | 2+5+10
 18 |   4   4   4   4     |  4 |  1  2  5 10    | 1+2+5+10
 19 |   5   4   4   4     |  4 |     2  5 10    | 2+2+5+10
 20 |   5   5   3   2     |  2 |          10    | 10+10
 21 |   3   5   4   3     |  3 |  1       10    | 1+10+10
 22 |   4   3   4   3     |  3 |     2    10    | 2+10+10
 23 |   4   4   5   4     |  4 |  1  2    10    | 1+2+10+10
 24 |   5   4   5   4     |  4 |     2    10    | 2+2+10+10
 25 |   5   5   3   3   1 |  1 |             25 | 25</pre>
<em><span style="text-decoration: underline;">Note:</span> most countries design their coin denominations such that the optimal change sequence does not require dynamic programming. Instead, you can use simple greedy algorithm: repeatedly pick the coin with the highest denomination that is smaller than or equal to the remaining amount of change that you need to make.</em></li>
</ol>
<h3>solution 8.2.1: <a href="itads2012/ex8/ud1KahBa/simple-change.c">simple-change.c</a> (hardcoded for denominations etc)</h3>
<h3>solution 8.2.2 and 8.2.3: <a href="itads2012/ex8/ud1KahBa/change.c">change.c</a></h3>