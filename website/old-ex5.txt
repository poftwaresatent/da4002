<h1>ITADS exercise 5<br />recursion and trees</h1>
<h2><strong>Under construction! This is still last year's version and might change...</strong></h2>
<h2>exercise 5.1: recursion</h2>
<p>The source code <a href="itads2012/ex5/recursion.c">recursion.c</a> contains three different implementations of the <tt>power</tt> function, which computes <a href="http://en.wikipedia.org/wiki/Exponentiation">exponentiation</a> (for integer exponents only). Each implementation does the same thing, but one of them prints detailed messages about what is going on.</p>
<ol>
<li>Compile and run <tt>recursion</tt>. Read the program output side-by-side with the source code and make sure you understand what's going on:
<ul>
<li>The <tt>power_verbose</tt> function <em>calls itself</em> (with a modified argument)!</li>
<li>That is called <em>recursion</em>, and it is a very useful programming technique.</li>
<li>In this case, the recursion computes the power function for a smaller exponent. Then, we simply multiply that result with the base.</li>
</ul>
</li>
<li>Download the partial code <a href="itads2012/ex5/factorial.c">factorial.c</a> and implement the <tt>factorial</tt> function such that it recursively computes the <a href="http://en.wikipedia.org/wiki/Factorial">factorial</a> of the given number. There are comments in the code which explain this in more detail. When you're finished, the output of the <tt>factorial</tt>program should be:
<pre class="command"> 0! =       1
 1! =       1
 2! =       2
 3! =       6
 4! =      24
 5! =     120
 6! =     720
 7! =    5040
 8! =   40320
 9! =  362880
10! = 3628800</pre>
</li>
</ol>
<p>The important thing to understand about recursion is:</p>
<ul>
<li>There has to be a termination condition for which the result can be computed <em>without recursion</em>.</li>
<li>Recursive functions call themselves, but with modified arguments.</li>
<li>The sequence of argument modifications through the recursive calls must lead to a situation where the termination condition is fulfilled. Otherwise, an infinite recursion would result (which will crash your program).</li>
</ul>
<h3>solution 5.1: <a href="itads2012/ex5/ou2aeWo8/factorial-solution.c">factorial-solution.c</a></h3>
<h2>exercise 5.2: child-sibling trees</h2>
<p>The partial implementation of child-sibling trees in <a href="itads2012/ex5/cstree.c">cstree.c</a> is ready to run, but it is missing the function implementations for printing the items in the tree, as well the function for computing the depth of each item.</p>
<ol>
<li>Implement the <tt>cstree_post_order</tt>function (line 111). With a correct implementation of the post-order traversal function, the program output should look like this:
<pre class="command">computing depth
*** Please implement cstree_compute_depth.
post-order traversal:
1
2
B
C
3
4
5
6
D
x
y
z
7
E
A
pre-order traversal:
*** Please implement cstree_pre_order.</pre>
</li>
<li>Implement the <tt>compute_depth</tt> function (line 142 in the original <tt>cstree.c</tt>). After that, the output of post-order traversal should be nicely indented, like this:
<pre class="command">initializing tree
computing depth
post-order traversal:
    1
    2
  B
  C
    3
    4
    5
    6
  D
      x
      y
      z
    7
  E
A
pre-order traversal:
*** Please implement cstree_pre_order.</pre>
</li>
<li>Finally, implement <tt>cstree_pre_order</tt>(originally on line 157). Then, your output should look like this:
<pre class="command">initializing tree
computing depth
post-order traversal:
    1
    2
  B
  C
    3
    4
    5
    6
  D
      x
      y
      z
    7
  E
A
pre-order traversal:
A
  B
    1
    2
  C
  D
    3
    4
    5
    6
  E
    7
      x
      y
      z</pre>
</li>
</ol>
<h3>solution 5.2: <a href="itads2012/ex5/ou2aeWo8/cstree-solution.c">cstree-solution.c</a></h3>
<h2>exercise 5.3: binary search trees</h2>
<p>Binary search trees are built from items that have two pointers: one of them is usually called <em>left</em> and points to a subtree of smaller values, and the other one is usually called <em>right</em> and points to a subtree of bigger values.</p>
<p>Before starting this exercise, look at the following two examples for <strong>finding an item</strong> in a binary search tree, given the tree's <em>root</em> (notice that any item in the tree is a root for a subtree). Both of the functions below find out if a given data is stored in a tree. Both these functions return 1 (one) if the data was found in the tree, or 0 (zero) if it was not found. But they are implemented in quite different ways! The important thing to realize is that <strong>there usually is more than one way to solve a problem</strong>. In this case, one solution is to use <em>recursion</em>, the other one uses <em>iteration</em>.</p>
<pre class="sourcecode">int bstree_find_rec (BSItem * root, int data)
{
  if (NULL == root)
    return 0;
  if (data &lt; root-&gt;data)
    return bstree_find_rec (root-&gt;left, data);
  else if (data &gt; root-&gt;data)
    return bstree_find_rec (root-&gt;right, data);
  return 1;
}

int bstree_find_iter (BSItem * root, int data)
{
  while (NULL != root) {
    if (data &lt; root-&gt;data)
      root = root-&gt;left;
    else if (data &gt; root-&gt;data)
      root = root-&gt;right;
    else
      return 1;
  }
  return 0;
}</pre>
<p>Both of the above approaches are valid and correct. Sometimes, a recursive approach might be more natural or compact, and sometimes and iterative approach will be better. When dealing with trees, it is often the recursive solutions that appear more elegant, because trees are inherently recursive data structures. But this is not always true...</p>
<p>Now, download <a href="itads2012/ex5/bstree.c">bstree.c</a>, a partial implementation of a binary search tree. This program needs to be given a list of insertions (and later also removals) on the command line. A good example insertion list is "<tt>4 2 6 1 3 5 7</tt>" which creates a fully balanced binary search tree with 7 items.</p>
<ol>
<li>Implement <tt>bstree_ins_rec</tt>, the recursive function which inserts new data into the binary search tree. The code comments give more detailed instructions.<br /> <strong><span style="text-decoration: underline;">Hint:</span> look at the examples above for finding an element... there is not much missing from them to turn them into insertion functions. If you cannot figure out a recursive solution (as described in the source code), maybe try an iterative one instead.</strong><br /> After implementing <tt>bstree_ins_rec</tt>, call your program as follows:
<pre class="command">./bstree 4 2 6 1 3 5 7</pre>
This should produce the following output:
<pre class="command">inserting 4
*** Please implement bstree_in_order_rec

inserting 2
*** Please implement bstree_in_order_rec

inserting 6
*** Please implement bstree_in_order_rec

inserting 1
*** Please implement bstree_in_order_rec

inserting 3
*** Please implement bstree_in_order_rec

inserting 5
*** Please implement bstree_in_order_rec

inserting 7
*** Please implement bstree_in_order_rec

Graphviz file written to diag.dot.
  to view the diagram, enter the command:
    dot -Tx11 diag.dot
  to create a PDF diagram, enter the command:
    dot -Tpdf -o diag.pdf diag.dot</pre>
Note that we are still missing <tt>bstree_in_order_rec</tt>, but as indicated by the program you can view the resulting tree with the help of <a href="http://www.graphviz.org/">Graphviz</a>. Just run the following command <em>(if it is installed... the University's UNIX workstations should soon have it, and on the VirtualBox image you can get it by running "sudo apt-get install -y graphviz")</em>:
<pre class="command">dot -Tx11 diag.dot</pre>
Which should open a window that looks like this: <img src="itads2012/ex5/diag-4-2-6-1-3-5-7.png" border="0" width="371" height="341" /></li>
<li>Implement <tt>bstree_in_order_rec</tt>, the recursive function which implement in-order traversal of the tree. With a correct implementation thereof, your program output (given the same command as before) should be:
<pre class="command">inserting 4
  4
inserting 2
  2  4
inserting 6
  2  4  6
inserting 1
  1  2  4  6
inserting 3
  1  2  3  4  6
inserting 5
  1  2  3  4  5  6
inserting 7
  1  2  3  4  5  6  7
Graphviz file written to diag.dot.
  to view the diagram, enter the command:
    dot -Tx11 diag.dot
  to create a PDF diagram, enter the command:
    dot -Tpdf -o diag.pdf diag.dot</pre>
Notice that the in-order traversal always gives a sorted list. That's a fundamental property of binary search trees.</li>
<li>Run the program again with a different insertion list, namely "1 2 3 4 5 6 7":
<pre class="command">./bstree 1 2 3 4 5 6 7</pre>
And look again at the diagram produced when running the visualization software <em>(if you don't have or cannot install Graphviz, you can look at <a href="itads2012/ex5/diag-1-2-3-4-5-6-7.png">this image</a> for the result)</em>:
<pre class="command">dot -Tx11 diag.dot</pre>
What has happened? Why?</li>
<li><em>Optional (advanced)</em><br /> Implement <tt>bstree_rem_rec</tt> and test it by appending a removal list when you run the <tt>bstree</tt>command. In particular, the following tests check that you have covered all the possible cases. Make sure that your code is right by comparing with the folowing commands and figures.
<ul>
<li>removing a left leaf
<pre class="command">./bstree 4 2 6 1 3 5 7 r 1</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-1.png" border="0" width="275" height="341" /></li>
<li>removing a right leaf
<pre class="command">./bstree 4 2 6 1 3 5 7 r 3</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-3.png" border="0" width="275" height="341" /></li>
<li>parent reattachment trick on the left
<pre class="command">./bstree 4 2 6 1 3 5 7 r 1 2</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-1-2.png" border="0" width="281" height="341" /></li>
<li>parent reattachment trick on the right
<pre class="command">./bstree 4 2 6 1 3 5 7 r 3 2</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-3-2.png" border="0" width="281" height="341" /></li>
<li>full node with leaf on its right
<pre class="command">./bstree 4 2 6 1 3 5 7 r 2</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-2.png" border="0" width="275" height="341" /></li>
<li>full node with full child on its right
<pre class="command">./bstree 4 2 6 1 3 5 7 r 4</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-4.png" border="0" width="275" height="341" /></li>
<li>full node whose right child has no left child
<pre class="command">./bstree 4 2 6 1 3 5 7 r 5 4</pre>
<img src="itads2012/ex5/diag-4-2-6-1-3-5-7-r-5-4.png" border="0" width="281" height="341" /></li>
</ul>
You should also check that you have correctly freed all memory occupied by the items that were removed. The easiest way to do this is to run each of the above commands in <a href="http://valgrind.org/">Valgrind</a>, a powerful debugging and profiling suite which checks for memory leaks. For example, run it on the first test case like this:
<pre class="command">valgrind ./bstree 4 2 6 1 3 5 7 r 1</pre>
The output of Valgrind should say something like this:
<pre class="command">==8852== HEAP SUMMARY:
==8852==     in use at exit: 0 bytes in 0 blocks
==8852==   total heap usage: 9 allocs, 9 frees, 440 bytes allocated
==8852== 
==8852== All heap blocks were freed -- no leaks are possible</pre>
If, on the other hand, you see something like this:
<pre class="command">==8906== HEAP SUMMARY:
==8906==     in use at exit: 88 bytes in 8 blocks
==8906==   total heap usage: 8 allocs, 0 frees, 88 bytes allocated
==8906== 
==8906== LEAK SUMMARY:
==8906==    definitely lost: 12 bytes in 1 blocks</pre>
that means you forgot to free something somewhere.</li>
</ol>
<h3>solution 5.3: <a href="itads2012/ex5/ou2aeWo8/bstree-solution.c">bstree-solution.c</a></h3>